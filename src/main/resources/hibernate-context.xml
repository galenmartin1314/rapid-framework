<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-3.2.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.2.xsd">
    <!-- 开启注解自动扫描 -->
    <context:annotation-config  />
    <!-- MybatisDao基类配置进来，以便Service类可以用注解的方式引入，然后就是扫描包路径，不扫描带有@Controller注解的类 -->
    <context:component-scan base-package="com.gm.ofi.orm.hibernate">
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 强制使用CGLIB代理  -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
	<!-- 加载属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- JDBC数据源配置 -->
	<!-- 配置连接池 c3p0连接池
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${datasource.driverClassName}" />
		<property name="jdbcUrl" value="${datasource.url}" />
		<property name="user" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<property name="minPoolSize" value="${c3p0.minPoolSize}" />
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
	</bean>
	-->
	<!-- apache dbcp连接池配置
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${datasource.driverClassName}" />
		<property name="url" value="${datasource.url}" />
		<property name="username" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="maxWait" value="${dbcp.maxWait}" />
		<property name="initialSize" value="${dbcp.initialSize}"/>
	</bean>
	-->
	<!-- BoneCP配置 -->
	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
		<property name="driverClass" value="${datasource.driverClassName}" />
		<property name="jdbcUrl" value="${datasource.url}" />
		<property name="username" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
		<property name="idleConnectionTestPeriodInMinutes" value="${bonecp.idleConnectionTestPeriodInMinutes}"/>
		<property name="idleMaxAgeInMinutes" value="${bonecp.idleMaxAgeInMinutes}"/>
		<property name="maxConnectionsPerPartition" value="${bonecp.maxConnectionsPerPartition}"/>
		<property name="minConnectionsPerPartition" value="${bonecp.minConnectionsPerPartition}"/>
		<property name="partitionCount" value="${bonecp.partitionCount}"/>
		<property name="acquireIncrement" value="${bonecp.acquireIncrement}"/>
		<property name="statementsCacheSize" value="${bonecp.statementsCacheSize}"/>
		<property name="releaseHelperThreads" value="${bonecp.releaseHelperThreads}"/>
		<property name="poolAvailabilityThreshold" value="${bonecp.poolAvailabilityThreshold}"/>
	</bean>
	<!-- 配置sessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 全注解扫描POJO路径,省略XML配置文件 -->
        <!-- <property name="packagesToScan" value="com.gm.ofi.orm.hibernate.model"/> -->
        <property name="hibernateProperties">
            <props>  
                <!-- 指定数据库的方言  -->  
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
                <!-- 启动应用时,是否根据Hibernate映射自动创建数据表 -->  
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.jdbc.fetch_size">50</prop>
                <prop key="hibernate.jdbc.batch_size">30</prop>
                <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
                <!-- 开启查询缓存 -->
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<!-- 开启二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<!-- Hibernate将收集有助于性能调节的统计数据 -->
				<prop key="hibernate.generate_statistics">true</prop>
				<!-- 强制Hibernate以更人性化的格式将数据存入二级缓存 -->  
				<prop key="hibernate.cache.use_structured_entries">true</prop>
				<!-- 高速缓存提供程序 --> 
				<!-- 由于spring也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
            </props>
        </property>
        <property name="mappingDirectoryLocations">
			<list>
				<value>classpath:com/gm/osoa/orm/hibernate/model</value>
			</list>
		</property>
    </bean>
	
	<!-- 定义事务管理器 -->  
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
        <property name="sessionFactory" ref="sessionFactory"/>  
    </bean>
  
    <!-- 配置事务的传播特性 -->  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <!-- hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->  
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />    
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />    
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />    
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />    
            <tx:method name="*" read-only="true"/>  
              
        </tx:attributes>  
    </tx:advice>  
  	<aop:aspectj-autoproxy /> 
    <!-- 哪些类的哪些方法参与事务  -->  
    <aop:config>  
        <!-- 只对业务逻辑层实施事务 -->    
        <aop:pointcut id="serviceMethods" expression="execution(* com.gm.ofi.orm.hibernate.service..*.*(..))"/>  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>  
    </aop:config>  
</beans>